comment "//" ;

token StellaIdent ((letter | '_') (letter | digit | '_' | '-' | '!' | '?' | ':')*) ;

token ExtensionName ( {"#"} (letter | '_' | '-' | digit)+ ) ;

AProgram.  Program ::= LanguageDecl [Extension] [Decl] ;

separator StellaIdent "," ;

LanguageCore. LanguageDecl ::= "language" "core" ";" ;

AnExtension. Extension ::= "extend" "with" [ExtensionName] ;
separator ExtensionName "," ;
terminator Extension ";" ;

DeclFun.    Decl ::= [Annotation] "fn" StellaIdent "(" [ParamDecl] ")" ReturnType ThrowType "{" [Decl] "return" Expr ";" "}" ;
DeclTypeAlias.  Decl ::= "type" StellaIdent "=" Type ;
separator Decl "" ;

ALocalDecl. LocalDecl ::= Decl ;
terminator LocalDecl ";" ;

InlineAnnotation. Annotation ::= "inline" ;
separator Annotation "" ;

AParamDecl. ParamDecl ::= StellaIdent ":" Type ;
separator ParamDecl "," ;

NoReturnType.     ReturnType ::= ;
SomeReturnType.   ReturnType ::= "->" Type ;

NoThrowType.    ThrowType ::= ;
SomeThrowType.  ThrowType ::= "throws" [Type] ;

If.           Expr ::= "if" Expr "then" Expr "else" Expr ;
Let.          Expr ::= "let" StellaIdent "=" Expr "in" Expr ;
separator Expr "," ;

AMatchCase.    MatchCase ::= Pattern "=>" Expr ;
separator MatchCase ";" ;

NoTyping.     OptionalTyping ::= ;
SomeTyping.   OptionalTyping ::= ":" Type ;

NoPatternData.    PatternData ::= ;
SomePatternData.  PatternData ::= "=" Pattern ;

NoExprData.   ExprData ::= ;
SomeExprData. ExprData ::= "=" Expr ;

PatternVariant. Pattern ::= "<|" StellaIdent PatternData "|>" ;
PatternTuple.   Pattern ::= "{" [Pattern] "}" ;
PatternRecord.  Pattern ::= "record" "{" [LabelledPattern] "}" ;
PatternList.    Pattern ::= "[" [Pattern] "]" ;
PatternCons.    Pattern ::= "cons" "(" Pattern "," Pattern ")" ;
PatternFalse.   Pattern ::= "false" ;
PatternTrue.    Pattern ::= "true" ;
PatternInt.     Pattern ::= Integer ;
PatternSucc.    Pattern ::= "succ" "(" Pattern ")" ;
PatternVar.     Pattern ::= StellaIdent ;
_.              Pattern ::= "(" Pattern ")" ;
separator Pattern "," ;

ALabelledPattern. LabelledPattern ::= StellaIdent "=" Pattern ;
separator LabelledPattern "," ;

ABinding.      Binding ::= StellaIdent "=" Expr ;

separator Binding "," ;

LessThan.           Expr1 ::= Expr2 "<" Expr2 ;
LessThanOrEqual.    Expr1 ::= Expr2 "<=" Expr2 ;
GreaterThan.        Expr1 ::= Expr2 ">" Expr2 ;
GreaterThanOrEqual. Expr1 ::= Expr2 ">=" Expr2 ;
Equal.              Expr1 ::= Expr2 "==" Expr2 ;
NotEqual.           Expr1 ::= Expr2 "!=" Expr2 ;

TypeAsc.      Expr2 ::= Expr2 "as" Type ;
Abstraction.  Expr2 ::= "fn" "(" [ParamDecl] ")" "{" "return" Expr ";" "}" ;
Tuple.        Expr2 ::= "{" [Expr] "}" ;
Record.       Expr2 ::= "record" "{" [Binding] "}" ;
Variant.      Expr2 ::= "<|" StellaIdent ExprData "|>" ;
Match.        Expr2 ::= "match" Expr1 "{" [MatchCase] "}" ;
List.         Expr2 ::= "[" [Expr] "]" ;
Add.          Expr2 ::= Expr2 "+" Expr3 ;
LogicOr.      Expr2 ::= Expr2 "or" Expr3;

Multiply.     Expr3 ::= Expr3 "*" Expr4 ;
LogicAnd.     Expr3 ::= Expr3 "and" Expr4 ;

Application.  Expr4 ::= Expr4 "(" [Expr] ")" ;

ConsList.     Expr5 ::= "cons" "(" Expr "," Expr ")" ;
Head.         Expr5 ::= "List::head" "(" Expr ")" ;
IsEmpty.      Expr5 ::= "List::isempty" "(" Expr ")" ;
Tail.         Expr5 ::= "List::tail" "(" Expr ")" ;

Succ.         Expr5 ::= "succ" "(" Expr ")" ;
LogicNot.     Expr5 ::= "not" "(" Expr ")" ;
Pred.         Expr5 ::= "Nat::pred" "(" Expr ")" ;
IsZero.       Expr5 ::= "Nat::iszero" "(" Expr ")" ;

Fix.          Expr5 ::= "fix" "(" Expr ")" ;
NatRec.       Expr5 ::= "Nat::rec" "(" Expr "," Expr "," Expr ")" ;

Fold.         Expr5 ::= "fold" "[" Type "]" Expr6 ;
Unfold.       Expr5 ::= "unfold" "[" Type "]" Expr6 ;

DotRecord.    Expr6 ::= Expr6 "." StellaIdent ;
DotTuple.     Expr6 ::= Expr6 "." Integer ;
ConstTrue.    Expr6 ::= "true" ;
ConstFalse.   Expr6 ::= "false" ;
ConstInt.     Expr6 ::= Integer ;
Var.          Expr6 ::= StellaIdent ;

TypeFun.      Type ::= "fn" "(" [Type] ")" "->" Type ;
TypeRec.      Type ::= "Âµ" StellaIdent "." Type ;
TypeSum.      Type1 ::= Type2 "+" Type2;
TypeTuple.    Type2 ::= "{" [Type] "}" ;
TypeRecord.   Type2 ::= "record" "{" [RecordFieldType] "}" ;
TypeVariant.  Type2 ::= "variant" "<|" [VariantFieldType] "|>" ;
TypeList.     Type2 ::= "[" Type "]" ;
TypeBool.     Type3 ::= "Bool" ;
TypeNat.      Type3 ::= "Nat" ;
TypeUnit.     Type3 ::= "Unit" ;
TypeVar.      Type3 ::= StellaIdent ;
separator Type "," ;

_. Expr   ::= Expr1 ;
_. Expr1  ::= Expr2 ;
_. Expr2  ::= Expr3 ;
_. Expr3  ::= Expr4 ;
_. Expr4  ::= Expr5 ;
_. Expr5  ::= Expr6 ;
_. Expr6  ::= "(" Expr ")" ;

AVariantFieldType.  VariantFieldType ::= StellaIdent OptionalTyping ;
separator VariantFieldType "," ;

ARecordFieldType.  RecordFieldType ::= StellaIdent ":" Type ;
separator RecordFieldType "," ;

_.  Type  ::= Type1 ;
_.  Type1 ::= Type2 ;
_.  Type2 ::= Type3 ;
_.  Type3 ::= "(" Type ")" ;

ATyping. Typing  ::= Expr ":" Type ;
